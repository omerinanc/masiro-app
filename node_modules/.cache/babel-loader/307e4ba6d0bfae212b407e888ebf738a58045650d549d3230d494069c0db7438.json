{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\inanc\\\\Documents\\\\GitHub\\\\omerinanc.github.io\\\\masiro\\\\src\\\\components\\\\auth\\\\profile.js\";\n// profile.js\nimport React, { Component } from \"react\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class Profile extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      user: null,\n      // Initialize as null\n      userPosts: [] // Initialize as an empty array\n    };\n  }\n\n  componentDidMount() {\n    const token = localStorage.getItem(\"token\"); // Retrieve the token from localStorage\n\n    if (token) {\n      // Set up the headers with the Bearer token\n      const headers = {\n        Authorization: `Bearer ${token}`\n      };\n\n      // Make the API request with the headers\n      axios.get(\"http://localhost:3001/api/profile\", {\n        headers\n      }).then(response => {\n        // Handle the response and set the user data in the state\n        this.setState({\n          user: response.data\n        });\n      }).catch(error => {\n        // Handle any errors, e.g., unauthorized (401)\n        console.error(\"Error fetching user profile:\", error);\n      });\n    } else {\n      // Handle the case where no token is available\n      console.error(\"No token available. User is not authenticated.\");\n    }\n  }\n  fetchPosts() {\n    axios.get(\"http://localhost:3001/api/posts\") // Replace with your API endpoint\n    .then(response => {\n      // Group posts by user\n      const postsByUser = {};\n      response.data.forEach(post => {\n        const userId = post.user.id;\n        if (!postsByUser[userId]) {\n          postsByUser[userId] = {\n            user: post.user,\n            posts: []\n          };\n        }\n        postsByUser[userId].posts.push(post);\n      });\n      this.setState({\n        postsByUser\n      });\n    }).catch(error => {\n      console.error(\"Error fetching posts:\", error);\n    });\n  }\n  render() {\n    const {\n      user,\n      userPosts\n    } = this.state;\n    if (!user) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 14\n      }, this); // Render a loading message while fetching the profile\n    }\n\n    console.log(\"User Posts in Render:\", userPosts); // Log userPosts\n\n    // Render the user profile information\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"User Profile\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Name: \", user.name]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Email: \", user.id]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"User Posts\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this), userPosts.filter(post => post.user.id === this.props.loggedInUserId).map(post => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `post-container post-${user.id}-${post.id}`,\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"user-post\",\n          children: post.content\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 15\n        }, this)\n      }, post.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 13\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this);\n  }\n}","map":{"version":3,"names":["React","Component","axios","jsxDEV","_jsxDEV","Profile","constructor","props","state","user","userPosts","componentDidMount","token","localStorage","getItem","headers","Authorization","get","then","response","setState","data","catch","error","console","fetchPosts","postsByUser","forEach","post","userId","id","posts","push","render","children","fileName","_jsxFileName","lineNumber","columnNumber","log","name","filter","loggedInUserId","map","className","content"],"sources":["C:/Users/inanc/Documents/GitHub/omerinanc.github.io/masiro/src/components/auth/profile.js"],"sourcesContent":["// profile.js\r\nimport React, { Component } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nexport default class Profile extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      user: null, // Initialize as null\r\n      userPosts: [], // Initialize as an empty array\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    const token = localStorage.getItem(\"token\"); // Retrieve the token from localStorage\r\n\r\n    if (token) {\r\n      // Set up the headers with the Bearer token\r\n      const headers = {\r\n        Authorization: `Bearer ${token}`,\r\n      };\r\n\r\n      // Make the API request with the headers\r\n      axios\r\n        .get(\"http://localhost:3001/api/profile\", { headers })\r\n        .then((response) => {\r\n          // Handle the response and set the user data in the state\r\n          this.setState({ user: response.data });\r\n        })\r\n        .catch((error) => {\r\n          // Handle any errors, e.g., unauthorized (401)\r\n          console.error(\"Error fetching user profile:\", error);\r\n        });\r\n    } else {\r\n      // Handle the case where no token is available\r\n      console.error(\"No token available. User is not authenticated.\");\r\n    }\r\n  }\r\n  fetchPosts() {\r\n    axios\r\n      .get(\"http://localhost:3001/api/posts\") // Replace with your API endpoint\r\n      .then((response) => {\r\n        // Group posts by user\r\n        const postsByUser = {};\r\n        response.data.forEach((post) => {\r\n          const userId = post.user.id;\r\n\r\n          if (!postsByUser[userId]) {\r\n            postsByUser[userId] = {\r\n              user: post.user,\r\n              posts: [],\r\n            };\r\n          }\r\n\r\n          postsByUser[userId].posts.push(post);\r\n        });\r\n\r\n        this.setState({ postsByUser });\r\n      })\r\n      .catch((error) => {\r\n        console.error(\"Error fetching posts:\", error);\r\n      });\r\n  }\r\n\r\n  render() {\r\n    const { user, userPosts } = this.state;\r\n\r\n    if (!user) {\r\n      return <div>Loading...</div>; // Render a loading message while fetching the profile\r\n    }\r\n    console.log(\"User Posts in Render:\", userPosts); // Log userPosts\r\n\r\n    // Render the user profile information\r\n    return (\r\n      <div>\r\n        <h1>User Profile</h1>\r\n        <p>Name: {user.name}</p>\r\n        <p>Email: {user.id}</p>\r\n        <h2>User Posts</h2>\r\n        {userPosts\r\n          .filter((post) => post.user.id === this.props.loggedInUserId)\r\n          .map((post) => (\r\n            <div\r\n              className={`post-container post-${user.id}-${post.id}`}\r\n              key={post.id}\r\n            >\r\n              <p className=\"user-post\">{post.content}</p>\r\n            </div>\r\n          ))}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}